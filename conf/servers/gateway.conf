
server {
    listen       8888 reuseport;
    listen       11000 http2 reuseport;
    server_name  _;

    access_log  logs/gateway-access.log json_log;

    location = /nginx_status {
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.10.8.0/24;
        deny all;
        access_log off;
        stub_status;
    }

    location /api/admin/ {
        access_log  logs/admin-access.log admin_log;

        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.10.8.0/24;

        allow 172.17.0.0/24;
        #deny all;

        content_by_lua_block {
            local admin = require("admin")
            admin.http_admin()
        }
    }

    location / {
        include common/proxy.conf;
        set $target_service_name '';
        set $origin_uri $request_uri;
        # set $origin_uri $uri;
        set $proxy_path '';
        set $biz_schema 'http';
        set $biz_domain 'backend_server';
        lua_code_cache on;
        rewrite_by_lua_block {
            local app = require("app")
            app.http_rewrite()
        }
        include common/phase.conf;

        proxy_ssl_name $biz_domain;
        proxy_ssl_server_name on;
        proxy_ssl_session_reuse off;
        proxy_pass $biz_schema://backend_server$proxy_path;
    }

    location @grpc_pass {
        grpc_set_header   Content-Type application/grpc;
        grpc_socket_keepalive on;

        rewrite_by_lua_block {
            local app = require("app")
            app.grpc_rewrite()
        }
        include common/phase.conf;
        grpc_pass grpc://backend_server;
    }

}

upstream backend_server {
    # just an invalid address as a place holder
    server 0.0.0.0;
    balancer_by_lua_block {
        local app = require("app")
        app.http_balancer()
    }
    # connection pool
    keepalive 100;
    keepalive_timeout 60s;
}
